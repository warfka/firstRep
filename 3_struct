#include <string>
#include <fstream>
#include <iomanip>
#include <stdlib.h>
#include <iostream>
using namespace std;
struct BOOK
{
	int row;
	int plase;
	string name;
};
struct BUY
{
	int row;
	int plase;
};

struct BUYList //описание узла списка
{
	BUY info; //информационное поле
	BUYList* next; //указатель на следующий элемент
	BUYList* prev; //указатель на предыдущий элемент
};
BUYList* headbuy; //указатель на первый элемент списка

struct BOOKList //описание узла списка
{
	BOOK info; //информационное поле
	BOOKList* next; //указатель на следующий элемент
	BOOKList* prev; //указатель на предыдущий элемент
};
BOOKList* headbook; //указатель на первый элемент списка

void AddBUYList();
int DeleteBUYList();
void PrintBUYList();

void AddBOOKList();
//int DeleteBOOKList();
void PrintBOOKList();

void main()
{
	int x;
	do
	{
		cout << "___________MENU___________\n";
		cout << "1. buy a ticket without booking\n";
		cout << "2. buy a ticket by booking\n";
		cout << "3. book a ticket\n";
		cout << "4. delete a reservation\n";
		cout << "5. show booked tickets\n";
		cout << "6. show purchased tickets\n";
		cout << "7. number of available seats\n";
		cout << "8. help\n";
		cout << "9. Exit\n";
		cout << "Selection: "; cin >> x;
		switch (x)
		{
		case 1: AddBUYList(); break;
		case 2:  break;
		case 3: AddBOOKList(); break;
		case 4: //DeleteBOOKList(); break;
		case 5: PrintBOOKList(); break;
		case 6: PrintBUYList(); break;
		}
	} while (x != 9);
}

void AddBUYList()
{
	int value1, value2, position;
	cout << "Row > "; cin >> value1;
	cout << "Plase > "; cin >> value2;
	cout << "Position > "; cin >> position;
	BUYList* node = new BUYList; //создание нового элемента
	node->info.row = value1; //присвоение элементу значения
	node->info.plase = value2;
	if (headbuy == NULL) //если список пуст
	{
		node->next = node; //установка указателя next
		node->prev = node; //установка указателя prev
		headbuy = node; //определяется голова списка
	}
	else
	{
		BUYList* p = headbuy;
		for (int i = position; i > 1; i--) p = p->next;
		p->prev->next = node;
		node->prev = p->prev;
		node->next = p;
		p->prev = node;
	}
	cout << "\nTicket purchased...\n\n";
}


void AddBOOKList()
{
	BOOKList* node = new BOOKList; //создание нового элемента
	int v1, v2, v3, pos;
	cout << "Row > "; cin >> node->info.row;
	cout << "Plase > "; cin >> node->info.plase;
	cout << "Name > "; cin >> node->info.name;
	cout << "Position > "; cin >> pos;
	
	if (headbook == NULL) //если список пуст
	{
		node->next = node; //установка указателя next
		node->prev = node; //установка указателя prev
		headbook = node; //определяется голова списка
	}
	else
	{
		BOOKList* p = headbook;
		for (int i = pos; i > 1; i--) p = p->next;
		p->prev->next = node;
		node->prev = p->prev;
		node->next = p;
		p->prev = node;
	}
	cout << "\nTicket booked...\n\n";
}

//***********************УДАЛЕНИЕ ЭЛЕМЕНТА***********************
int DeleteBUYList()
{
	int position;
	cout << "Position > "; cin >> position;
	if (headbuy == NULL) { cout << "\nThe list is empty\n\n"; return 0; }
	if (headbuy == headbuy->next)
	{
		delete headbuy;
		headbuy = NULL;
	}
	else
	{
		BUYList* a = headbuy;
		for (int i = position; i > 1; i--) a = a->next;
		if (a == headbuy) headbuy = a->next;
		a->prev->next = a->next;
		a->next->prev = a->prev;
		delete a;
	}
	cout << "\nЭлемент удален...\n\n";
}
//*************************ВЫВОД СПИСКА*************************
void PrintBUYList()
{
	if (headbuy == NULL) cout << "\nThe list is empty\n\n";
	else
	{
		BUYList* a = headbuy;
		cout << "\nPurchased tickets: ";
		do
		{
			cout << "row: " << a->info.row << ", plase:";
			cout << a->info.plase << " \n";
			a = a->next;
		} while (a != headbuy); cout << "\n\n";
	}
}

void PrintBOOKList()
{
	if (headbook == NULL) cout << "\nThe list is empty\n\n";
	else
	{
		BOOKList* a = headbook;
		cout << "\nBooked tickets: ";
		do
		{
			cout << "row: " << a->info.row << ", plase:";
			cout << a->info.plase << ", name:" << a->info.name << " \n";
			a = a->next;
		} while (a != headbook); cout << "\n\n";
	}
}

/*struct BUY
{
	int row;
	int plase;
};
struct BOOK
{
	int row;
	int plase;
	string name;
};

struct Elem_buy
{
	BUY info; // информационное поле звена
	Elem_buy* next; // указатель на следующее звено
	Elem_buy* prev; // указатель на предыдущее звено
};
Elem_buy* head = NULL; // указатель на начало
Elem_buy* tail = NULL; // указатель на конец

struct Elem_book
{
	BOOK info; // информационное поле звена
	Elem_book* next; // указатель на следующее звено
	Elem_book* prev; // указатель на предыдущее звено
};
Elem_book* head = NULL; // указатель на начало
Elem_book* tail = NULL; // указатель на конец
*/







/*bool buyDB();
bool buyB();
bool book();
bool deleteB();
char showbuy();
char showbook();
void free();



int main()
{



	int input;
	while (1)
	{
		cout << "___________MENU___________\n";
		cout << "1. buy a ticket without booking\n";
		cout << "2. buy a ticket by booking\n";
		cout << "3. book a ticket\n";
		cout << "4. delete a reservation\n";
		cout << "5. show booked tickets\n";
		cout << "6. show purchased tickets\n";
		cout << "7. number of available seats\n";
		cout << "8. help\n";
		cout << "9. Exit\n";
		cout << "Selection: ";
		cin >> input;
		switch (input) {
		case 1:
		{
			buyDB();
			break;
		}
		case 2:
		{
			buyB();
			break;
		}
		case 3:
			book();
			break;
		case 4:
			deleteB();
			break;
		case 5:
			showbook();
			break;
		case 6:
			showbuy();
			break;
		case 7:
			free();
			break;
		case 8:
			cout << "help!!!\n";
			break;
		case 9:
			return 0;
		default:
			cout << "Error, bad input, quitting\n";
			break;
		}
	}
}

bool buyDB()
{
	int r, p, s = 0;
	cout << "row:";
	cin >> r;
	cout << endl << "plase:";
	cin >> p;
	if (bookTicket.last != -1)
	{
		for (int i = 0; i < bookTicket.last; i++)
		{
			if (r != bookTicket.elem[i].row && p != bookTicket.elem[i].plase)
			{
				buyTicket.last++;
				buyTicket.elem[buyTicket.last].row = r;
				buyTicket.elem[buyTicket.last].plase = p;
				s++;
			}
		}
		if (s >= 1) cout << "error!\n"; //забронирован билет
	}
	else
	{
		buyTicket.last++;
		buyTicket.elem[buyTicket.last].row = r;
		buyTicket.elem[buyTicket.last].plase = p;
	}

	return 0;

}

bool buyB()
{
	string name_check;
	int j;
	cout << endl << "name:";
	cin >> name_check;
	for (int i = 0; i < 99; i++)
	{
		if (name_check == bookTicket.elem[i].name)
		{
			buyTicket.last++;
			cout << "+!\n";
			cout << "row:" << bookTicket.elem[i].row << endl;
			cout << "plase:" << bookTicket.elem[i].plase << endl;
			buyTicket.elem[buyTicket.last].row = bookTicket.elem[i].row;
			buyTicket.elem[buyTicket.last].plase = bookTicket.elem[i].plase;

		}

	}


	for (j = 0; j < bookTicket.last; j++)
	{

		for (int i = j - 1; i < bookTicket.last; i++)
			//перемещаем на одну позицию вверх
			bookTicket.elem[i] = bookTicket.elem[i + 1];
	}
	bookTicket.last--;
	return 0;
}

bool book()
{
	bookTicket.last++;
	cout << "row:";
	cin >> bookTicket.elem[bookTicket.last].row;
	cout << endl << "plase:";
	cin >> bookTicket.elem[bookTicket.last].plase;
	cout << endl << "name:";
	cin >> bookTicket.elem[bookTicket.last].name;
	return 0;
}

bool deleteB()
{
	int j;
	int s = 0;
	string name_check;
	cout << endl << "name:";
	cin >> name_check;

	for (j = 0; j < bookTicket.last; j++)
	{
		if (name_check == bookTicket.elem[j].name)
		{
			for (int i = j - 1; i < bookTicket.last; i++)
				//перемещаем на одну позицию вверх
				bookTicket.elem[i] = bookTicket.elem[i + 1];
			s++;
		}
	}
	if (s < 1) cout << "error" << endl;
	bookTicket.last--;
	return 0;
}




char showbuy()
{
	for (int i = 0; i <= buyTicket.last; i++)
	{
		cout << i + 1 << ")" << " row:" << buyTicket.elem[i].row << " plase:" << buyTicket.elem[i].plase << endl;
	}
	if (buyTicket.last < 0) cout << "no tickets purchased" << endl;
	return 0;
}

char showbook()
{
	for (int i = 0; i <= bookTicket.last; i++)
	{
		cout << i + 1 << ")" << " row:" << bookTicket.elem[i].row << " plase:" << bookTicket.elem[i].plase << " name:" << bookTicket.elem[i].name << endl;

	}
	if (bookTicket.last < 0) cout << "no tickets booked" << endl;
	return 0;
}

void free()
{
	cout << "number of tickets booked: " << bookTicket.last + 1 << endl;
	cout << "number of tickets purchased: " << buyTicket.last + 1 << endl;

}*/
